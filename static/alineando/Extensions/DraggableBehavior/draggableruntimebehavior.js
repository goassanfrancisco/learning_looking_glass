var gdjs;(function(r){class d extends r.RuntimeBehavior{constructor(e,a,g){super(e,a,g);this._draggedByDraggableManager=null;this._checkCollisionMask=!!a.checkCollisionMask}updateFromBehaviorData(e,a){return!0}onDeActivate(){this._endDrag()}onDestroy(){this.onDeActivate()}_endDrag(){this._draggedByDraggableManager&&this._draggedByDraggableManager.endDrag(),this._draggedByDraggableManager=null}_dismissDrag(){this._draggedByDraggableManager=null}_tryBeginDrag(e){if(this._draggedByDraggableManager)return!1;const a=e.getGame().getInputManager(),g=t.getMouseManager(e);if(a.isMouseButtonPressed(0)&&!g.isDragging(this)){if(g.tryAndTakeDragging(e,this))return this._draggedByDraggableManager=g,!0}else{const o=a.getStartedTouchIdentifiers();for(let s=0;s<o.length;++s){const i=t.getTouchManager(e,o[s]);if(!i.isDragging(this)&&i.tryAndTakeDragging(e,this))return this._draggedByDraggableManager=i,!0}}return!1}_shouldEndDrag(e){return this._draggedByDraggableManager?this._draggedByDraggableManager.shouldEndDrag(e,this):!1}_updateObjectPosition(e){return this._draggedByDraggableManager?(this._draggedByDraggableManager.updateObjectPosition(e,this),!0):!1}doStepPreEvents(e){this._tryBeginDrag(e),this._shouldEndDrag(e)&&this._endDrag(),this._updateObjectPosition(e)}doStepPostEvents(e){const a=t.getMouseManager(e);a.leftPressedLastFrame=e.getGame().getInputManager().isMouseButtonPressed(0)}isDragged(e){return!!this._draggedByDraggableManager}}r.DraggableRuntimeBehavior=d;class t{constructor(e){this._draggingSomething=!1;this._draggableBehavior=null;this._xOffset=0;this._yOffset=0}static getMouseManager(e){return e.mouseDraggableManager||(e.mouseDraggableManager=new l(e)),e.mouseDraggableManager}static getTouchManager(e,a){return e.touchDraggableManagers||(e.touchDraggableManagers=[]),e.touchDraggableManagers[a]||(e.touchDraggableManagers[a]=new u(e,a)),e.touchDraggableManagers[a]}tryAndTakeDragging(e,a){if(this._draggableBehavior&&a.owner.getZOrder()<=this._draggableBehavior.owner.getZOrder())return!1;const g=this.getPosition(e,a);if(a.owner.insideObject(g[0],g[1])){if(a._checkCollisionMask&&!a.owner.isCollidingWithPoint(g[0],g[1]))return!1}else return!1;return this._draggableBehavior&&this._draggableBehavior._dismissDrag(),this._draggableBehavior=a,this._xOffset=g[0]-a.owner.getX(),this._yOffset=g[1]-a.owner.getY(),!0}updateObjectPosition(e,a){const g=this.getPosition(e,a);(a.owner.getX()!=g[0]-this._xOffset||a.owner.getY()!=g[1]-this._yOffset)&&(a.owner.setX(g[0]-this._xOffset),a.owner.setY(g[1]-this._yOffset),this._draggingSomething=!0)}endDrag(){this._draggingSomething=!1,this._draggableBehavior=null}}class l extends t{constructor(e){super(e);this.leftPressedLastFrame=!1}isDragging(e){return this.leftPressedLastFrame||this._draggingSomething}getPosition(e,a){const g=e.getGame().getInputManager();return e.getLayer(a.owner.getLayer()).convertCoords(g.getMouseX(),g.getMouseY())}shouldEndDrag(e,a){return!e.getGame().getInputManager().isMouseButtonPressed(0)}}class u extends t{constructor(e,a){super(e);this._touchId=a}isDragging(e){return this._draggingSomething}getPosition(e,a){const g=e.getGame().getInputManager();return e.getLayer(a.owner.getLayer()).convertCoords(g.getTouchX(this._touchId),g.getTouchY(this._touchId))}shouldEndDrag(e,a){return e.getGame().getInputManager().getAllTouchIdentifiers().indexOf(this._touchId)===-1}}r.registerBehavior("DraggableBehavior::Draggable",r.DraggableRuntimeBehavior)})(gdjs||(gdjs={}));
//# sourceMappingURL=draggableruntimebehavior.js.map
